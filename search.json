[{"title":"用python简便地抓取刘昊然的写真（17行代码）","url":"http://yoursite.com/2018/09/13/用python简便地抓取刘昊然的写真（17行代码）/","content":"<h4 id=\"17行python代码抓取刘昊然图片之家的写真\"><a href=\"#17行python代码抓取刘昊然图片之家的写真\" class=\"headerlink\" title=\"17行python代码抓取刘昊然图片之家的写真\"></a>17行python代码抓取刘昊然图片之家的写真</h4><p>用python来爬取网页信息是很简便的。因为它有很多库来帮助我们实现我们想要的功能。本实验用到的库有：requests和bs4中的BeautifulSoup。这两个库的安装过程如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#按住win+R，打开cmd，然后依次输入：</span><br><span class=\"line\">pip install bs4</span><br><span class=\"line\">pip install requests</span><br></pre></td></tr></table></figure>\n<p>在windows下爬取的话，还要检查自己是否安装了lxml。如果没安装，也可以直接用pip安装：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install lxml</span><br></pre></td></tr></table></figure>\n<p>安装好库之后呢，就可以开始爬取刘昊然的写真啦。</p>\n<ul>\n<li><p>首先找到图片之家中刘昊然壁纸的网址：<a href=\"http://www.tupianzj.com/mingxing/xiezhen/liuhaoran/\" target=\"_blank\" rel=\"noopener\">http://www.tupianzj.com/mingxing/xiezhen/liuhaoran/</a><br>由上面网址，我们可以翻译它的信息：http：//图片之家/明星/写真/刘昊然<br>所以，如果你要抓取其他的明星写真，只需要改变一下网址的最后一个就可以啦！</p>\n</li>\n<li><p>打开网址，右键，点击“检查”，然后你就可以看到这个网页的源代码啦。然后分析源代码，发现图片都存在下图的1中，而图片的存放格式都如下图的2、3那样：<br><img src=\"https://img-blog.csdn.net/20180425170616562?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l1bnl1bnl4/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"这里写图片描述\"></p>\n</li>\n<li><p>找到规律后，我们就可以敲代码啦：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#导入库</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> bs4 <span class=\"keyword\">import</span> BeautifulSoup</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#给定网址</span></span><br><span class=\"line\">URL = <span class=\"string\">\"http://www.tupianzj.com/mingxing/xiezhen/liuhaoran/\"</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#抓取该URL的内容</span></span><br><span class=\"line\">html = requests.get(URL).text</span><br><span class=\"line\"><span class=\"comment\">#解析html，并存放在soup中</span></span><br><span class=\"line\">soup = BeautifulSoup(html, <span class=\"string\">'lxml'</span>)</span><br><span class=\"line\"><span class=\"comment\">#找到上面说的图中1的位置，因为图片都在它之中</span></span><br><span class=\"line\">img_ul = soup.find_all(<span class=\"string\">'div'</span>, &#123;<span class=\"string\">\"id\"</span>: <span class=\"string\">\"main\"</span>&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#创建img文件夹来存放抓取到的图片</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\">os.makedirs(<span class=\"string\">'./img/'</span>,exist_ok=<span class=\"keyword\">True</span>)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#由上图的2、3可知道图片的具体位置是在’img src‘中，所以先把所有的img找出来，再一一访问</span></span><br><span class=\"line\">imgs = ul.find_all(<span class=\"string\">'img'</span>)</span><br><span class=\"line\"><span class=\"comment\">#一一访问图片并下载</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> img <span class=\"keyword\">in</span> imgs:</span><br><span class=\"line\">    url = img[<span class=\"string\">'src'</span>]</span><br><span class=\"line\">    r = requests.get(url, stream=<span class=\"keyword\">True</span>)</span><br><span class=\"line\">    image_name = url.split(<span class=\"string\">'/'</span>)[<span class=\"number\">-1</span>]</span><br><span class=\"line\">    <span class=\"keyword\">with</span> open(<span class=\"string\">'./img/%s'</span> % image_name, <span class=\"string\">'wb'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> chunk <span class=\"keyword\">in</span> r.iter_content(chunk_size=<span class=\"number\">128</span>):<span class=\"comment\">#以128字节大小存放</span></span><br><span class=\"line\">            f.write(chunk)</span><br><span class=\"line\">    print(<span class=\"string\">'Saved %s'</span> % image_name)</span><br></pre></td></tr></table></figure>\n<pre><code>Saved 9-1P31G623590-L.jpg\nSaved 9-1P3131419500-L.jpg\nSaved 9-1P3031414430-L.jpg\nSaved 9-1P3021543180-L.jpg\nSaved 9-1P3021123440-L.jpg\nSaved 9-1P22G043450-L.jpg\nSaved 9-1P1291JR50-L.jpg\nSaved 9-1P1221131480-L.jpg\nSaved 9-1P1051036070-L.jpg\nSaved 9-1P1051001240-L.jpg\nSaved 9-1G219115I70-L.jpg\nSaved 9-1G1151100100-L.jpg\nSaved 9-1G0301436130-L.jpg\nSaved 9-1G0041543170-L.png\nSaved 9-1FZ91523210-L.png\nSaved 9-1FHG13P60-L.png\nSaved 9-1F5201911020-L.jpg\nSaved 16-1612191430140-L.jpg\nSaved 16-160P11A0460-L.jpg\nSaved 9-16062G41001227.jpg\nSaved 16-1605301305090-L.jpg\nSaved 16-16051Q442070-L.jpg\nSaved 16-16051Q416050-L.jpg\nSaved 16-1605161012270-L.jpg\nSaved 16-1604131Z0240-L.jpg\nSaved 9-16012Q120410-L.jpg\nSaved 9-151224200S00-L.jpg\n</code></pre><p>至此，图片抓取完啦，打开img文件夹看看：<br><img src=\"https://img-blog.csdn.net/20180425171802879?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l1bnl1bnl4/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"这里写图片描述\"><br>看，图片都下载到这啦。随便点开一张：<br><img src=\"https://img-blog.csdn.net/2018042517183811?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l1bnl1bnl4/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"这里写图片描述\"><br>帅帅的刘昊然！</p>\n","categories":[],"tags":[]},{"title":"用python的turtle画分形树","url":"http://yoursite.com/2018/09/13/用python的turtle画分形树/","content":"<p>﻿由于分形树具有对称性，自相似性，所以我们可以用递归来完成绘制。只要确定开始树枝长、每层树枝的减短长度和树枝分叉的角度，我们就可以把分形树画出来啦！！<br>代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding: utf-8 -*-</span><br><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\">绘制分形树</span><br><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">import turtle as tl </span><br><span class=\"line\"></span><br><span class=\"line\">def draw_smalltree(tree_length,tree_angle):</span><br><span class=\"line\">\t&apos;&apos;&apos;</span><br><span class=\"line\">\t绘制分形树函数</span><br><span class=\"line\">\t&apos;&apos;&apos;</span><br><span class=\"line\">\tif tree_length &gt;= 3:</span><br><span class=\"line\">\t\ttl.forward(tree_length) #往前画</span><br><span class=\"line\">\t\ttl.right(tree_angle)  #往右转</span><br><span class=\"line\">\t\tdraw_smalltree(tree_length - 10,tree_angle)#画下一枝，直到画到树枝长小于3</span><br><span class=\"line\"></span><br><span class=\"line\">\t\ttl.left(2 * tree_angle)  #转向画左</span><br><span class=\"line\">\t\tdraw_smalltree(tree_length -10,tree_angle) #直到画到树枝长小于3</span><br><span class=\"line\"></span><br><span class=\"line\">\t\ttl.rt(tree_angle) #转到正向上的方向，然后回溯到上一层</span><br><span class=\"line\">\t\tif tree_length &lt;= 30:  #树枝长小于30，可以当作树叶了，树叶部分为绿色</span><br><span class=\"line\">\t\t\ttl.pencolor(&apos;green&apos;)</span><br><span class=\"line\">\t\tif tree_length &gt; 30:</span><br><span class=\"line\">\t\t\ttl.pencolor(&apos;brown&apos;)  #树干部分为棕色</span><br><span class=\"line\">\t\ttl.backward(tree_length)  #往回画，回溯到上一层</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def main():</span><br><span class=\"line\">\ttl.penup()</span><br><span class=\"line\">\t#tl.pencolor(&apos;green&apos;)</span><br><span class=\"line\">\ttl.left(90)  #因为树是往上的，所以先把方向转左</span><br><span class=\"line\">\ttl.backward(250) #把起点放到底部</span><br><span class=\"line\">\ttl.pendown()</span><br><span class=\"line\">\ttree_length = 100  #我设置的最长树干为100</span><br><span class=\"line\">\ttree_angle = 20  #树枝分叉角度，我设为20</span><br><span class=\"line\">\tdraw_smalltree(tree_length,tree_angle)</span><br><span class=\"line\">\ttl.exitonclick()  #点击才关闭画画窗口</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &apos;__main__&apos;:</span><br><span class=\"line\">\tmain()</span><br></pre></td></tr></table></figure>\n<p>结果如下：<br><img src=\"https://img-blog.csdn.net/20180416145713941?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l1bnl1bnl4/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"分形树\"></p>\n","categories":[],"tags":[]},{"title":"python手写bp神经网络实现人脸性别识别1.0","url":"http://yoursite.com/2018/09/13/python手写bp神经网络实现人脸性别识别1.0/","content":"<hr>\n<p>写在前面：本实验用到的图片均来自google图片，侵删！</p>\n<hr>\n<h3 id=\"实验介绍\"><a href=\"#实验介绍\" class=\"headerlink\" title=\"实验介绍\"></a>实验介绍</h3><p>用python手写一个简单bp神经网络，实现人脸的性别识别。由于本人的机器配置比较差，所以无法使用网上很红的人脸大数据数据集（如lfw数据集等等），所以我从google图片下载了一些中国明星的照片来作为本次实验的数据集。</p>\n<ul>\n<li><p>训练数据集：5位中国的男明星（每个明星10张），6位中国的女明星（每个明星10张）。</p>\n</li>\n<li><p>测试数据集：6张女生，6张男生</p>\n</li>\n</ul>\n<h3 id=\"实验环境\"><a href=\"#实验环境\" class=\"headerlink\" title=\"实验环境\"></a>实验环境</h3><ul>\n<li><p>win10</p>\n</li>\n<li><p>python3.5+opencv+dlib+PIL</p>\n</li>\n<li><p>说明：上面涉及到的库都可以用pip install #### 轻易下载，但要注意它们之间的关联性，被依赖的库要先安装好。直接google就会有更详细的安装教程哦，所以这里不详说。。</p>\n</li>\n</ul>\n<h3 id=\"实验步骤\"><a href=\"#实验步骤\" class=\"headerlink\" title=\"实验步骤\"></a>实验步骤</h3><h4 id=\"1-下载图片，构成数据集\"><a href=\"#1-下载图片，构成数据集\" class=\"headerlink\" title=\"1 下载图片，构成数据集\"></a>1 下载图片，构成数据集</h4><p>我随机从google图片中下载了5位男明星的图片和6位女明星的图片。男明星的图片放在/photo/boys文件中，女明星的图片放在/photo/girls文件中。<br>然后，我又随机从google图片中下载了6张‘女生’的图片和6张‘男生’的图片，分别放在/girltest文件和/boytest文件中<br>男明星：<br><img src=\"https://img-blog.csdn.net/20180614160149565?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l1bnl1bnl4/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"男明星\"><br>女明星：<br><img src=\"https://img-blog.csdn.net/20180614160212991?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l1bnl1bnl4/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"女明星\"></p>\n<h4 id=\"2-框出人脸，并保存人脸区域\"><a href=\"#2-框出人脸，并保存人脸区域\" class=\"headerlink\" title=\"2 框出人脸，并保存人脸区域\"></a>2 框出人脸，并保存人脸区域</h4><p>利用别人写好的人脸分类器来截取图片中的人脸，并把从训练集中截取到的人脸放到/faces中。图片排序为0.jpg,1.jpg…从女明星的图片开始读起，然后男明星的接上。具体函数对应get_face_from_photo（）函数。<br>人脸分类器下载：<a href=\"https://github.com/opencv/opencv/tree/master/data/haarcascades\" target=\"_blank\" rel=\"noopener\">人脸分类器</a></p>\n<p>框住人脸：<br><img src=\"https://img-blog.csdn.net/2018061416031087?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l1bnl1bnl4/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"吴彦祖正脸\"><br><img src=\"https://img-blog.csdn.net/2018061416035931?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l1bnl1bnl4/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"彭于晏侧脸\"><br><img src=\"https://img-blog.csdn.net/20180614160421433?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l1bnl1bnl4/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"邓紫棋正脸\"></p>\n<p>保存下来的人脸区域：<br><img src=\"https://img-blog.csdn.net/20180614160451783?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l1bnl1bnl4/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"人脸图集\"></p>\n<h4 id=\"3-将人脸图片灰度化，且改为28-28大小\"><a href=\"#3-将人脸图片灰度化，且改为28-28大小\" class=\"headerlink\" title=\"3 将人脸图片灰度化，且改为28*28大小\"></a>3 将人脸图片灰度化，且改为28*28大小</h4><p>具体看函数change_photo_size28（）</p>\n<p>灰度化后的部分图集：<br><img src=\"https://img-blog.csdn.net/20180614160528225?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l1bnl1bnl4/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"灰度化后的部分图集\"></p>\n<h4 id=\"4-训练\"><a href=\"#4-训练\" class=\"headerlink\" title=\"4 训练\"></a>4 训练</h4><h5 id=\"4-1-读取图片的灰度值矩阵\"><a href=\"#4-1-读取图片的灰度值矩阵\" class=\"headerlink\" title=\"4.1 读取图片的灰度值矩阵\"></a>4.1 读取图片的灰度值矩阵</h5><p>读取图片的灰度值矩阵，读取出来的矩阵为（28，28）的，变为（784，1）的，然后把所有图片的的灰度值矩阵叠加成一个大的矩阵。<br>具体介绍参照：<a href=\"https://blog.csdn.net/yunyunyx/article/details/80539222\" target=\"_blank\" rel=\"noopener\">参考1</a>、<a href=\"https://blog.csdn.net/yunyunyx/article/details/80473532\" target=\"_blank\" rel=\"noopener\">参考2</a></p>\n<h5 id=\"4-2-训练、\"><a href=\"#4-2-训练、\" class=\"headerlink\" title=\"4.2 训练、\"></a>4.2 训练、</h5><ul>\n<li><p>梯度下降法</p>\n</li>\n<li><p>sigmoid函数</p>\n</li>\n</ul>\n<p>具体介绍参照：<a href=\"https://blog.csdn.net/yunyunyx/article/details/80473532\" target=\"_blank\" rel=\"noopener\">参考1</a><br><a href=\"https://blog.csdn.net/yunyunyx/article/details/80539222\" target=\"_blank\" rel=\"noopener\">参考2</a></p>\n<h4 id=\"5-测试\"><a href=\"#5-测试\" class=\"headerlink\" title=\"5 测试\"></a>5 测试</h4><p>测试图片的前期处理和训练图片的前期处理一样，先框出人脸，再灰度化和改变大小为28*28。<br>男生测试集：<br><img src=\"https://img-blog.csdn.net/20180614160800666?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l1bnl1bnl4/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"男测试集\"><br>女生测试集<br><img src=\"https://img-blog.csdn.net/20180614160822304?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l1bnl1bnl4/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"女测试集\"></p>\n<p>规定预测出来的pre&gt;0.5为男生，否则为女生。</p>\n<h3 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\">内容：训练图片处理和人脸识别的训练部分</span><br><span class=\"line\">作者：surecheun</span><br><span class=\"line\">邮箱：surecheun@163.com</span><br><span class=\"line\">版本：1.0</span><br><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\">from PIL import Image</span><br><span class=\"line\">import sys</span><br><span class=\"line\">import dlib</span><br><span class=\"line\">import cv2</span><br><span class=\"line\">import os</span><br><span class=\"line\">import os.path</span><br><span class=\"line\">import numpy as np</span><br><span class=\"line\">import PIL.Image</span><br><span class=\"line\">from pylab import *</span><br><span class=\"line\"></span><br><span class=\"line\">def get_face_from_photo(i,path,spath):</span><br><span class=\"line\">    &apos;&apos;&apos;</span><br><span class=\"line\">    利用别人写好的人脸分类器来截取图片中的人脸，并保存到spath中</span><br><span class=\"line\">    分类器下载：https://github.com/opencv/opencv/tree/master/data/haarcascades</span><br><span class=\"line\">    参考:官方文档</span><br><span class=\"line\">    &apos;&apos;&apos;</span><br><span class=\"line\">    detector = dlib.get_frontal_face_detector() #获取人脸分类</span><br><span class=\"line\">    # 读取path路径下的图片，获得所有的图片名字</span><br><span class=\"line\">    filenames = os.listdir(path)</span><br><span class=\"line\"></span><br><span class=\"line\">    for f1 in filenames:</span><br><span class=\"line\">        f = os.path.join(path,f1)</span><br><span class=\"line\">        iimag = PIL.Image.open(f)</span><br><span class=\"line\">        # opencv 读取图片，并显示</span><br><span class=\"line\">        img = cv2.imread(f, cv2.IMREAD_COLOR)</span><br><span class=\"line\"> </span><br><span class=\"line\">        b, g, r = cv2.split(img)    # 分离三个颜色通道</span><br><span class=\"line\">        img2 = cv2.merge([r, g, b])   # 生成新图片</span><br><span class=\"line\"></span><br><span class=\"line\">        counts = detector(img, 1) #人脸检测 </span><br><span class=\"line\">         </span><br><span class=\"line\">        for index, face in enumerate(counts):</span><br><span class=\"line\">            </span><br><span class=\"line\">            # 在图片中标注人脸，并显示</span><br><span class=\"line\">            left = face.left()</span><br><span class=\"line\">            top = face.top()</span><br><span class=\"line\">            right = face.right()</span><br><span class=\"line\">            bottom = face.bottom()</span><br><span class=\"line\">            </span><br><span class=\"line\">            #保存人脸区域</span><br><span class=\"line\">            j =str(i)</span><br><span class=\"line\">            j = j+&apos;.jpg&apos;</span><br><span class=\"line\">            save_path = os.path.join(spath,j)</span><br><span class=\"line\">            region = (left,top,right,bottom)</span><br><span class=\"line\">            #裁切图片</span><br><span class=\"line\">            cropImg = iimag.crop(region)</span><br><span class=\"line\"></span><br><span class=\"line\">            #保存裁切后的图片</span><br><span class=\"line\">            cropImg.save(save_path)</span><br><span class=\"line\">            i +=1</span><br><span class=\"line\">            </span><br><span class=\"line\">            cv2.rectangle(img, (left, top), (right, bottom), (0, 255, 0), 3)</span><br><span class=\"line\">            cv2.namedWindow(f, cv2.WINDOW_AUTOSIZE)</span><br><span class=\"line\">            cv2.imshow(f, img)</span><br><span class=\"line\"></span><br><span class=\"line\">    # 等待按键，退出，销毁窗口</span><br><span class=\"line\">    k = cv2.waitKey(0)</span><br><span class=\"line\">    cv2.destroyAllWindows()</span><br><span class=\"line\">    return i</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">def change_photo_size28(path,spath):</span><br><span class=\"line\">    &apos;&apos;&apos;</span><br><span class=\"line\">    将人脸图片转化为28*28的灰度图片</span><br><span class=\"line\">    &apos;&apos;&apos;</span><br><span class=\"line\">    </span><br><span class=\"line\">    filenames = os.listdir(path)</span><br><span class=\"line\"></span><br><span class=\"line\">    for filename in filenames:</span><br><span class=\"line\">        f = os.path.join(path,filename)</span><br><span class=\"line\">        iimag = PIL.Image.open(f).convert(&apos;L&apos;).resize((28,28))</span><br><span class=\"line\">        savepath = os.path.join(spath,filename)</span><br><span class=\"line\">        #savepath = spath + &apos;/&apos; + filename</span><br><span class=\"line\">        iimag.save(savepath)</span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">def read_photo_for_train(k,photo_path):</span><br><span class=\"line\">    &apos;&apos;&apos;</span><br><span class=\"line\">    读取训练图片</span><br><span class=\"line\">    &apos;&apos;&apos;</span><br><span class=\"line\">    for i in range(k):</span><br><span class=\"line\">        j = i</span><br><span class=\"line\">        j = str(j)</span><br><span class=\"line\">        st = &apos;.jpg&apos;</span><br><span class=\"line\">        j = j+st</span><br><span class=\"line\">        j = os.path.join(photo_path,j)</span><br><span class=\"line\">        im1 = array(Image.open(j).convert(&apos;L&apos;))</span><br><span class=\"line\">        #（28，28）--&gt;(28*28,1)</span><br><span class=\"line\">        im1 = im1.reshape((784,1))</span><br><span class=\"line\">        #把所有的图片灰度值放到一个矩阵中</span><br><span class=\"line\">        #一列代表一张图片的信息</span><br><span class=\"line\">        if i == 0:</span><br><span class=\"line\">            im = im1</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            im = np.hstack((im,im1))</span><br><span class=\"line\">    return im</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">def layerout(w,b,x):</span><br><span class=\"line\"></span><br><span class=\"line\">    &apos;&apos;&apos;</span><br><span class=\"line\">    sigmoid函数实现</span><br><span class=\"line\">    &apos;&apos;&apos;</span><br><span class=\"line\">    </span><br><span class=\"line\">    y = np.dot(w,x) + b</span><br><span class=\"line\">    t = -1.0*y</span><br><span class=\"line\">    # n = len(y)</span><br><span class=\"line\">    # for i in range(n):</span><br><span class=\"line\">        # y[i]=1.0/(1+exp(-y[i]))</span><br><span class=\"line\">    y = 1.0/(1+exp(t))</span><br><span class=\"line\">    return y</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">def mytrain(x_train,y_train):</span><br><span class=\"line\">    &apos;&apos;&apos;</span><br><span class=\"line\">    训练样本：中国某些明星的google图片(106张，女60张，男46张），侵删。女生标签为0，男生标签为1.</span><br><span class=\"line\">    训练方法：简单的梯度下降法</span><br><span class=\"line\">    参考（本人博客另一篇）：https://blog.csdn.net/yunyunyx/article/details/80539222</span><br><span class=\"line\">    &apos;&apos;&apos;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &apos;&apos;&apos;</span><br><span class=\"line\">    设置一个隐藏层，784--&gt;隐藏层神经元个数--&gt;1</span><br><span class=\"line\">    &apos;&apos;&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">    step=int(input(&apos;mytrain迭代步数：&apos;)) </span><br><span class=\"line\">    a=double(input(&apos;学习因子：&apos;)) </span><br><span class=\"line\">    inn = 784  #输入神经元个数</span><br><span class=\"line\">    hid = int(input(&apos;隐藏层神经元个数：&apos;))#隐藏层神经元个数</span><br><span class=\"line\">    out = 1  #输出层神经元个数</span><br><span class=\"line\"></span><br><span class=\"line\">    w = np.random.randn(out,hid)</span><br><span class=\"line\">    w = np.mat(w)</span><br><span class=\"line\">    b = np.mat(np.random.randn(out,1)) </span><br><span class=\"line\">    w_h = np.random.randn(hid,inn)</span><br><span class=\"line\">    w_h = np.mat(w_h)</span><br><span class=\"line\">    b_h = np.mat(np.random.randn(hid,1)) </span><br><span class=\"line\"></span><br><span class=\"line\">    for i in range(step):</span><br><span class=\"line\">        #打乱训练样本</span><br><span class=\"line\">        r=np.random.permutation(106)</span><br><span class=\"line\">        x_train = x_train[:,r]</span><br><span class=\"line\">        y_train = y_train[:,r]</span><br><span class=\"line\">        #mini_batch</span><br><span class=\"line\">        for j in range(100):</span><br><span class=\"line\">            x = np.mat(x_train[:,j]) </span><br><span class=\"line\">            x = x.reshape((784,1))</span><br><span class=\"line\">            y = np.mat(y_train[:,j]) </span><br><span class=\"line\">            y = y.reshape((1,1))</span><br><span class=\"line\">            hid_put = layerout(w_h,b_h,x) </span><br><span class=\"line\">            out_put = layerout(w,b,hid_put) </span><br><span class=\"line\"></span><br><span class=\"line\">            #更新公式的实现</span><br><span class=\"line\">            o_update = np.multiply(np.multiply((y-out_put),out_put),(1-out_put)) </span><br><span class=\"line\">            h_update = np.multiply(np.multiply(np.dot((w.T),np.mat(o_update)),hid_put),(1-hid_put)) </span><br><span class=\"line\"></span><br><span class=\"line\">            outw_update = a*np.dot(o_update,(hid_put.T)) </span><br><span class=\"line\">            outb_update = a*o_update </span><br><span class=\"line\">            hidw_update = a*np.dot(h_update,(x.T)) </span><br><span class=\"line\">            hidb_update = a*h_update </span><br><span class=\"line\"></span><br><span class=\"line\">            w = w + outw_update </span><br><span class=\"line\">            b = b+ outb_update </span><br><span class=\"line\">            w_h = w_h +hidw_update </span><br><span class=\"line\">            b_h =b_h +hidb_update </span><br><span class=\"line\"></span><br><span class=\"line\">    return w,b,w_h,b_h</span><br><span class=\"line\">    </span><br><span class=\"line\">def mytest(x_test,w,b,w_h,b_h):</span><br><span class=\"line\">    &apos;&apos;&apos;</span><br><span class=\"line\">    预测结果pre大于0.5，为男；预测结果小于或等于0.5为女</span><br><span class=\"line\">    &apos;&apos;&apos;</span><br><span class=\"line\">    hid = layerout(w_h,b_h,x_test);</span><br><span class=\"line\">    pre = layerout(w,b,hid);</span><br><span class=\"line\">    print(pre)</span><br><span class=\"line\">    if pre &gt; 0.5:</span><br><span class=\"line\">        print(&quot;hello,boy!&quot;)</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        print(&quot;hello,girl!&quot;)</span><br><span class=\"line\">        </span><br><span class=\"line\">        </span><br><span class=\"line\">        </span><br><span class=\"line\">#训练</span><br><span class=\"line\"></span><br><span class=\"line\">#框出人脸，并保存到faces中,i为保存的名字</span><br><span class=\"line\">i = 0</span><br><span class=\"line\">#女孩</span><br><span class=\"line\">path = &apos;C:\\\\Users\\\\yxg\\\\Desktop\\\\photo\\\\girls&apos;</span><br><span class=\"line\">spath = &apos;C:\\\\Users\\\\yxg\\\\Desktop\\\\faces&apos;</span><br><span class=\"line\">i = get_face_from_photo(i,path,spath)</span><br><span class=\"line\">#男孩</span><br><span class=\"line\">path = &apos;C:\\\\Users\\\\yxg\\\\Desktop\\\\photo\\\\boys&apos;</span><br><span class=\"line\">i = get_face_from_photo(i,path,spath)</span><br><span class=\"line\"></span><br><span class=\"line\">#将人脸图片转化为28*28的灰度图片</span><br><span class=\"line\">path = &apos;C:\\\\Users\\\\yxg\\\\Desktop\\\\faces&apos;</span><br><span class=\"line\">spath = &apos;C:\\\\Users\\\\yxg\\\\Desktop\\\\faces&apos;</span><br><span class=\"line\">change_photo_size28(path,spath)</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">#获取图片信息</span><br><span class=\"line\">im = read_photo_for_train(106,spath)</span><br><span class=\"line\"></span><br><span class=\"line\">#归一化</span><br><span class=\"line\">immin = im.min()</span><br><span class=\"line\">immax = im.max()</span><br><span class=\"line\">im = (im-immin)/(immax-immin)</span><br><span class=\"line\"></span><br><span class=\"line\">x_train = im</span><br><span class=\"line\"></span><br><span class=\"line\">#制作标签，前60张是女生，为0</span><br><span class=\"line\">y1 = np.zeros((1,60))</span><br><span class=\"line\">y2 = np.ones((1,46))</span><br><span class=\"line\">y_train = np.hstack((y1,y2))</span><br><span class=\"line\"></span><br><span class=\"line\">#开始训练</span><br><span class=\"line\">print(&quot;----------------------开始训练-----------------------------------------&quot;)</span><br><span class=\"line\">w,b,w_h,b_h = mytrain(x_train,y_train)</span><br><span class=\"line\">print(&quot;-----------------------训练结束------------------------------------------&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#测试</span><br><span class=\"line\">print(&quot;--------------------测试女生-----------------------------------------&quot;)</span><br><span class=\"line\">#框出人脸，并保存到girltests中,i为保存的名字</span><br><span class=\"line\">i = 0</span><br><span class=\"line\">#女孩测试集</span><br><span class=\"line\">path = &apos;C:\\\\Users\\\\yxg\\\\Desktop\\\\girltest&apos;</span><br><span class=\"line\">spath = &apos;C:\\\\Users\\\\yxg\\\\Desktop\\\\girltests&apos;</span><br><span class=\"line\">i = get_face_from_photo(i,path,spath)</span><br><span class=\"line\"></span><br><span class=\"line\">#将人脸图片转化为28*28的灰度图片</span><br><span class=\"line\">path = &apos;C:\\\\Users\\\\yxg\\\\Desktop\\\\girltests&apos;</span><br><span class=\"line\">spath = &apos;C:\\\\Users\\\\yxg\\\\Desktop\\\\girltests&apos;</span><br><span class=\"line\">change_photo_size28(path,spath)</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">#获取图片信息</span><br><span class=\"line\">im = read_photo_for_train(6,spath)</span><br><span class=\"line\"></span><br><span class=\"line\">#归一化</span><br><span class=\"line\">immin = im.min()</span><br><span class=\"line\">immax = im.max()</span><br><span class=\"line\">im = (im-immin)/(immax-immin)</span><br><span class=\"line\"></span><br><span class=\"line\">x_test = im</span><br><span class=\"line\">#print(x_test.shape)</span><br><span class=\"line\">for i in range(6):</span><br><span class=\"line\">    xx = x_test[:,i]</span><br><span class=\"line\">    xx = xx.reshape((784,1))</span><br><span class=\"line\">    mytest(xx,w,b,w_h,b_h)</span><br><span class=\"line\">print(&quot;---------------------测试男生-----------------------------&quot;)</span><br><span class=\"line\">#框出人脸，并保存到boytests中,i为保存的名字</span><br><span class=\"line\">i = 0</span><br><span class=\"line\">#男孩测试集</span><br><span class=\"line\">path = &apos;C:\\\\Users\\\\yxg\\\\Desktop\\\\boytest&apos;</span><br><span class=\"line\">spath = &apos;C:\\\\Users\\\\yxg\\\\Desktop\\\\boytests&apos;</span><br><span class=\"line\">i = get_face_from_photo(i,path,spath)</span><br><span class=\"line\"> </span><br><span class=\"line\">#将人脸图片转化为28*28的灰度图片</span><br><span class=\"line\">path = &apos;C:\\\\Users\\\\yxg\\\\Desktop\\\\boytests&apos;</span><br><span class=\"line\">spath = &apos;C:\\\\Users\\\\yxg\\\\Desktop\\\\boytests&apos;</span><br><span class=\"line\">change_photo_size28(path,spath)</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">#获取图片信息</span><br><span class=\"line\">im = read_photo_for_train(6,spath)</span><br><span class=\"line\"></span><br><span class=\"line\">#归一化</span><br><span class=\"line\">immin = im.min()</span><br><span class=\"line\">immax = im.max()</span><br><span class=\"line\">im = (im-immin)/(immax-immin)</span><br><span class=\"line\"></span><br><span class=\"line\">x_test = im</span><br><span class=\"line\">for i in range(6):</span><br><span class=\"line\">    xx = x_test[:,i]</span><br><span class=\"line\">    xx = xx.reshape((784,1))</span><br><span class=\"line\">    mytest(xx,w,b,w_h,b_h)</span><br></pre></td></tr></table></figure>\n<h3 id=\"测试结果\"><a href=\"#测试结果\" class=\"headerlink\" title=\"测试结果\"></a>测试结果</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">----------------------开始训练--------------------------------------</span><br><span class=\"line\">mytrain迭代步数：300</span><br><span class=\"line\">学习因子：0.26</span><br><span class=\"line\">隐藏层神经元个数：28</span><br><span class=\"line\">-----------------------训练结束--------------------------------------</span><br><span class=\"line\">--------------------测试女生-----------------------------------------</span><br><span class=\"line\">[[0.00435441]]</span><br><span class=\"line\">hello,girl!</span><br><span class=\"line\">[[0.00160697]]</span><br><span class=\"line\">hello,girl!</span><br><span class=\"line\">[[0.47261838]]</span><br><span class=\"line\">hello,girl!</span><br><span class=\"line\">[[0.00344136]]</span><br><span class=\"line\">hello,girl!</span><br><span class=\"line\">[[0.00057052]]</span><br><span class=\"line\">hello,girl!</span><br><span class=\"line\">[[0.00030406]]</span><br><span class=\"line\">hello,girl!</span><br><span class=\"line\">---------------------测试男生-----------------------------</span><br><span class=\"line\">[[0.27352905]]</span><br><span class=\"line\">hello,girl!</span><br><span class=\"line\">[[0.63632333]]</span><br><span class=\"line\">hello,boy!</span><br><span class=\"line\">[[0.60296128]]</span><br><span class=\"line\">hello,boy!</span><br><span class=\"line\">[[0.68961767]]</span><br><span class=\"line\">hello,boy!</span><br><span class=\"line\">[[0.98755486]]</span><br><span class=\"line\">hello,boy!</span><br><span class=\"line\">[[0.99023972]]</span><br><span class=\"line\">hello,boy!</span><br></pre></td></tr></table></figure>\n<p>看结果，发现效果不错：6张女生图片都被识别对了，而男生只有一个被识别错误。。</p>\n","categories":[],"tags":[]},{"title":"opencv：vs2015添加了包含目录依然无法打开‘opencv2_core_core.hpp’ 解决方法","url":"http://yoursite.com/2018/09/13/opencv：vs2015添加了包含目录依然无法打开‘opencv2_core_core.hpp’ 解决方法/","content":"<h4 id=\"安装环境\"><a href=\"#安装环境\" class=\"headerlink\" title=\"安装环境\"></a>安装环境</h4><ul>\n<li><p>win10</p>\n</li>\n<li><p>vs2015</p>\n</li>\n</ul>\n<h4 id=\"出错和改错\"><a href=\"#出错和改错\" class=\"headerlink\" title=\"出错和改错\"></a>出错和改错</h4><p>按网上的教程，配置好opencv后，包括已经把以下内容添加到‘包含目录’了： </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">E:\\openCV\\opencv\\build\\include</span><br><span class=\"line\">E:\\openCV\\opencv\\build\\include\\opencv</span><br><span class=\"line\">E:\\openCV\\opencv\\build\\include\\opencv2</span><br></pre></td></tr></table></figure>\n<p>输入测试代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;  </span><br><span class=\"line\">#include &lt;opencv2/core/core.hpp&gt;  </span><br><span class=\"line\">#include &lt;opencv2/highgui/highgui.hpp&gt;  </span><br><span class=\"line\"></span><br><span class=\"line\">using namespace cv;</span><br><span class=\"line\"></span><br><span class=\"line\">int main() &#123;</span><br><span class=\"line\">\tMat img = imread(&quot;Aaron_Eckhart_0001.jpg&quot;);</span><br><span class=\"line\">\t// 在窗口中显示avatar  </span><br><span class=\"line\">\timshow(&quot;Aaron_Eckhart_0001&quot;, img);</span><br><span class=\"line\">\t// 等待6000 ms后窗口自动关闭    </span><br><span class=\"line\">\twaitKey(6000);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行调试，一直出现以下错误：无法打开‘opencv2/core/core.hpp’…….。Google了很久也找不到答案。。。失落了一会，突然发现#include opencv2/core/core.hpp 中opencv2已经在包含目录中了。。。。所以只要把路径中重复的opencv2去掉就好啦。因为opencv中很多的相关文件都包含了opencv2，所以，改一下刚刚添加到‘包含目录’中的第三项就好啦，改成：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">E:\\openCV\\opencv\\build\\include</span><br></pre></td></tr></table></figure>\n<p>这样就可以啦！</p>\n","categories":[],"tags":[]},{"title":"matlab手写神经网络实现识别手写数字","url":"http://yoursite.com/2018/09/13/matlab手写神经网络实现识别手写数字/","content":"<h3 id=\"实验说明\"><a href=\"#实验说明\" class=\"headerlink\" title=\"实验说明\"></a>实验说明</h3><p>一直想自己写一个神经网络来实现手写数字的识别，而不是套用别人的框架。恰巧前几天，有幸从同学那拿到5000张已经贴好标签的手写数字图片，于是我就尝试用matlab写一个网络。</p>\n<ul>\n<li><p>实验数据：5000张手写数字图片（.jpg)，图片命名为1.jpg,2.jpg…5000.jpg。还有一个放着标签的excel文件。</p>\n</li>\n<li><p>数据处理：前4000张作为训练样本，后1000张作为测试样本。</p>\n</li>\n<li><p>图片处理：用matlab的imread（）函数读取图片的灰度值矩阵（28，28），然后把每张图片的灰度值矩阵reshape为（28*28，1），然后把前4000张图片的灰度值矩阵合并为x_train，把后1000张图片的灰度值矩阵合并为x_test。</p>\n</li>\n</ul>\n<p><img src=\"https://img-blog.csdn.net/20180527224744974?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l1bnl1bnl4/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"数字图片截图\"><br><img src=\"https://img-blog.csdn.net/20180527224824667?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l1bnl1bnl4/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"数字标签截图\"></p>\n<h3 id=\"神经网络设计\"><a href=\"#神经网络设计\" class=\"headerlink\" title=\"神经网络设计\"></a>神经网络设计</h3><ul>\n<li><p>网络层设计：一层隐藏层，一层输出层</p>\n</li>\n<li><p>输入层：一张图片的灰度值矩阵reshape后的784个数，也就是x_train中的某一列</p>\n</li>\n<li><p>输出层：（10，1）的列向量，其中列向量中最大的数所在的索引就是预测的数字</p>\n</li>\n<li><p>激励函数：sigmoid函数（<a href=\"https://baike.baidu.com/item/Sigmoid%E5%87%BD%E6%95%B0\" target=\"_blank\" rel=\"noopener\">公式</a>)</p>\n</li>\n<li><p>更新法则：后向传播算法（<a href=\"http://www.cnblogs.com/ronny/p/ann_02.html\" target=\"_blank\" rel=\"noopener\">参考</a>）</p>\n</li>\n<li><p>一点说明：这里的训练我分别用了普通梯度下降法和mini_batch（batch size 为10）梯度下降法来实现</p>\n</li>\n<li><p>测试：用了两种方式表示正确率，一是统计预测正确的个数，而是利用matlab的plotconfusion函数</p>\n</li>\n</ul>\n<h3 id=\"网络实现\"><a href=\"#网络实现\" class=\"headerlink\" title=\"网络实现\"></a>网络实现</h3><p>全部实现包括5个函数(gedata.m /  layerout.m / mytrain.m / mytrain_mini.m / test.m)和一个main.m文件。</p>\n<h5 id=\"读取数据（getdata-m）\"><a href=\"#读取数据（getdata-m）\" class=\"headerlink\" title=\"读取数据（getdata.m）\"></a>读取数据（getdata.m）</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function[x_train,y_train,x_test,y_test]=getdata()</span><br><span class=\"line\">%把图片变成像素矩阵</span><br><span class=\"line\">%path :图片路径 </span><br><span class=\"line\">% x_train:训练样本像素矩阵(784,4000)</span><br><span class=\"line\">%y_train:训练样本标签(10,4000)</span><br><span class=\"line\">%x_test:测试样本像素矩阵(784,1000)</span><br><span class=\"line\">%y_test:测试样本标签(10,1000)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">% photopath = &apos;./photo/&apos;;</span><br><span class=\"line\">% snames=dir([photopath  &apos;*&apos; &apos;.jpg&apos;])%get all filenames in photopath</span><br><span class=\"line\">% l = length(snames)</span><br><span class=\"line\">% </span><br><span class=\"line\">% %get x_ data</span><br><span class=\"line\">% x_train = [];</span><br><span class=\"line\">% x_test = [];</span><br><span class=\"line\">% </span><br><span class=\"line\">% for i=1:4000</span><br><span class=\"line\">%     iname=[photopath snames(i).name] %the path of jpg</span><br><span class=\"line\">%     x = imread(iname);  % the shape of x is (28,28)</span><br><span class=\"line\">%     x = reshape(x,784,1);  %reshape x to (784,1)</span><br><span class=\"line\">%     x_train = [x_train,x];</span><br><span class=\"line\">% end</span><br><span class=\"line\">% </span><br><span class=\"line\">% for k=4001:5000</span><br><span class=\"line\">%     kname=[photopath snames(k).name];  %the path of jpg</span><br><span class=\"line\">%     x = imread(kname);   %the shape of x is (28,28)</span><br><span class=\"line\">%     x = reshape(x,784,1);  %reshape x  to (784,1)</span><br><span class=\"line\">%     x_test = [x_test,x];</span><br><span class=\"line\">% end</span><br><span class=\"line\"></span><br><span class=\"line\">x_train=[];</span><br><span class=\"line\"></span><br><span class=\"line\">for i=1:4000</span><br><span class=\"line\">      x=im2double(imread(strcat(num2str(i),&apos;.jpg&apos;)));</span><br><span class=\"line\">      x=reshape(x,784,1);</span><br><span class=\"line\">      x_train=[x_train,x];</span><br><span class=\"line\">end</span><br><span class=\"line\">x_test =[];</span><br><span class=\"line\"></span><br><span class=\"line\">for k=4001:5000</span><br><span class=\"line\">      x=im2double(imread(strcat(num2str(k),&apos;.jpg&apos;)));</span><br><span class=\"line\">      x=reshape(x,784,1);</span><br><span class=\"line\">      x_test=[x_test,x];</span><br><span class=\"line\">end</span><br><span class=\"line\">data=xlsread(&apos;label.xlsx&apos;);</span><br><span class=\"line\">y_train=data(:,1:4000);</span><br><span class=\"line\">y_test = data(:,4001:5000);</span><br><span class=\"line\"></span><br><span class=\"line\">x_train;</span><br><span class=\"line\">y_train;</span><br><span class=\"line\">x_test;</span><br><span class=\"line\">y_test;</span><br><span class=\"line\"></span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n<p>这里踩了一个坑。我本来读取图片，是按目录来读取的，然后训练出来的效果一直不好。一度怀疑自己的更新函数写错了，改了很久，才发现按目录读取的图片顺序是错误的！按目录读取的图片并不是按1，2，3…这样读的，而是按下面的顺序读取的，这样就和label对不上了！！！<br><img src=\"https://img-blog.csdn.net/20180527221353206?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l1bnl1bnl4/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"\"></p>\n<h5 id=\"layerout函数\"><a href=\"#layerout函数\" class=\"headerlink\" title=\"layerout函数\"></a>layerout函数</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function [y] = layerout(w,b,x)</span><br><span class=\"line\">%output function</span><br><span class=\"line\">y = w*x + b;</span><br><span class=\"line\">n = length(y);</span><br><span class=\"line\">for i =1:n</span><br><span class=\"line\">    y(i)=1.0/(1+exp(-y(i)));</span><br><span class=\"line\">end</span><br><span class=\"line\">y;</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n<h5 id=\"训练一（mytrain-m）\"><a href=\"#训练一（mytrain-m）\" class=\"headerlink\" title=\"训练一（mytrain.m）\"></a>训练一（mytrain.m）</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function[w,b,w_h,b_h]=mytrain(x_train,y_train)</span><br><span class=\"line\">%train function:设置一个隐藏层，784--&gt;隐藏层神经元个数--&gt;10</span><br><span class=\"line\">%x_train:训练样本的像素数据</span><br><span class=\"line\">%y_train：训练样本的标签</span><br><span class=\"line\">%w：输出层权重</span><br><span class=\"line\">%b：输出层偏置</span><br><span class=\"line\">%w_h：隐藏层权重</span><br><span class=\"line\">%b_h：隐藏层偏置</span><br><span class=\"line\">%step：循环步数</span><br><span class=\"line\"></span><br><span class=\"line\">step=input(&apos;迭代步数：&apos;);</span><br><span class=\"line\">a=input(&apos;学习因子：&apos;);</span><br><span class=\"line\">in = 784; %输入神经元个数</span><br><span class=\"line\">hid = input(&apos;隐藏层神经元个数：&apos;);%隐藏层神经元个数</span><br><span class=\"line\">out = 10; %输出层神经元个数</span><br><span class=\"line\">o =1;</span><br><span class=\"line\"></span><br><span class=\"line\">w = randn(out,hid);</span><br><span class=\"line\">b = randn(out,1);</span><br><span class=\"line\">w_h =randn(hid,in);</span><br><span class=\"line\">b_h = randn(hid,1);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">for i=0:step</span><br><span class=\"line\">    %打乱训练样本</span><br><span class=\"line\">    r=randperm(4000);</span><br><span class=\"line\">    x_train = x_train(:,r);</span><br><span class=\"line\">    y_train = y_train(:,r);</span><br><span class=\"line\">    </span><br><span class=\"line\">    for j=1:4000</span><br><span class=\"line\">        x = x_train(:,j);</span><br><span class=\"line\">        y = y_train(:,j);</span><br><span class=\"line\"></span><br><span class=\"line\">        hid_put = layerout(w_h,b_h,x);</span><br><span class=\"line\">        out_put = layerout(w,b,hid_put);</span><br><span class=\"line\"></span><br><span class=\"line\">        %更新公式的实现</span><br><span class=\"line\">        o_update = (y-out_put).*out_put.*(1-out_put);</span><br><span class=\"line\">        h_update = ((w&apos;)*o_update).*hid_put.*(1-hid_put);</span><br><span class=\"line\"></span><br><span class=\"line\">        outw_update = a*(o_update*(hid_put&apos;));</span><br><span class=\"line\">        outb_update = a*o_update;</span><br><span class=\"line\">        hidw_update = a*(h_update*(x&apos;));</span><br><span class=\"line\">        hidb_update = a*h_update;</span><br><span class=\"line\"></span><br><span class=\"line\">        w = w + outw_update;</span><br><span class=\"line\">        b = b+ outb_update;</span><br><span class=\"line\">        w_h = w_h +hidw_update;</span><br><span class=\"line\">        b_h =b_h +hidb_update;</span><br><span class=\"line\">    end</span><br><span class=\"line\">end  </span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n<h5 id=\"训练二（mytrain-mini-m）\"><a href=\"#训练二（mytrain-mini-m）\" class=\"headerlink\" title=\"训练二（mytrain_mini.m）\"></a>训练二（mytrain_mini.m）</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function[w,b,w_h,b_h]=mytrain_mini(x_train,y_train)</span><br><span class=\"line\">%train function:设置一个隐藏层，784--&gt;隐藏层神经元个数--&gt;10</span><br><span class=\"line\">%x_train:训练样本的像素数据</span><br><span class=\"line\">%y_train：训练样本的标签</span><br><span class=\"line\">%w：输出层权重</span><br><span class=\"line\">%b：输出层偏置</span><br><span class=\"line\">%w_h：隐藏层权重</span><br><span class=\"line\">%b_h：隐藏层偏置</span><br><span class=\"line\">%step：循环步数</span><br><span class=\"line\"></span><br><span class=\"line\">step=ipout(&apos;迭代步数：&apos;);</span><br><span class=\"line\">a=input(&apos;学习因子：&apos;);</span><br><span class=\"line\">in = 784; %输入神经元个数</span><br><span class=\"line\">hid = input(&apos;隐藏层神经元个数：&apos;);%隐藏层神经元个数</span><br><span class=\"line\">out = 10; %输出层神经元个数</span><br><span class=\"line\">o =1;</span><br><span class=\"line\"></span><br><span class=\"line\">w = randn(out,hid);</span><br><span class=\"line\">b = randn(out,1);</span><br><span class=\"line\">w_h =randn(hid,in);</span><br><span class=\"line\">b_h = randn(hid,1);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">for i=0:step</span><br><span class=\"line\">    %打乱训练样本</span><br><span class=\"line\">    r=randperm(4000);</span><br><span class=\"line\">    x_train = x_train(:,r);</span><br><span class=\"line\">    y_train = y_train(:,r);</span><br><span class=\"line\">    %mini_batch</span><br><span class=\"line\">    for jj=0:399</span><br><span class=\"line\">        %取batch为10  更新取10次的平均值</span><br><span class=\"line\">        for j=jj*10+1:(jj+1)*10</span><br><span class=\"line\">            x = x_train(:,j);</span><br><span class=\"line\">            y = y_train(:,j);</span><br><span class=\"line\"></span><br><span class=\"line\">            hid_put = layerout(w_h,b_h,x);</span><br><span class=\"line\">            out_put = layerout(w,b,hid_put);</span><br><span class=\"line\">            </span><br><span class=\"line\">            %更新公式的实现</span><br><span class=\"line\">            o_update = (y-out_put).*out_put.*(1-out_put);</span><br><span class=\"line\">            h_update = ((w&apos;)*o_update).*hid_put.*(1-hid_put);</span><br><span class=\"line\">            </span><br><span class=\"line\">            if j==1</span><br><span class=\"line\">                outw_update = (double(a)/10)*(o_update*(hid_put&apos;));</span><br><span class=\"line\">                outb_update = (double(a)/10)*o_update;</span><br><span class=\"line\">                hidw_update = (double(a)/10)*(h_update*(x&apos;));</span><br><span class=\"line\">                hidb_update = (double(a)/10)*h_update;</span><br><span class=\"line\">            end</span><br><span class=\"line\">            </span><br><span class=\"line\">            if j~=1</span><br><span class=\"line\">                outw_update = outw_update + (double(a)/10)*(o_update*(hid_put&apos;));</span><br><span class=\"line\">                outb_update = outb_update -(double(a)/10)*o_update;</span><br><span class=\"line\">                hidw_update = hidw_update + (double(a)/10)*(h_update*(x&apos;));</span><br><span class=\"line\">                hidb_update = hidb_update -(double(a)/10)*h_update;</span><br><span class=\"line\">            end</span><br><span class=\"line\">        end</span><br><span class=\"line\">        </span><br><span class=\"line\">        w = w + outw_update;</span><br><span class=\"line\">        b = b+ outb_update;</span><br><span class=\"line\">        w_h = w_h +hidw_update;</span><br><span class=\"line\">        b_h =b_h +hidb_update;</span><br><span class=\"line\">    end  </span><br><span class=\"line\">end</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n<h5 id=\"测试（mytest-m）\"><a href=\"#测试（mytest-m）\" class=\"headerlink\" title=\"测试（mytest.m）\"></a>测试（mytest.m）</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function[]= mytest(x_test,y_test,w,b,w_h,b_h)</span><br><span class=\"line\">%x_test:测试样本的像素数据</span><br><span class=\"line\">%y_test：测试样本的标签</span><br><span class=\"line\">%w：输出层权重</span><br><span class=\"line\">%b：输出层偏置</span><br><span class=\"line\">%w_h：隐藏层权重</span><br><span class=\"line\">%b_h：隐藏层偏置</span><br><span class=\"line\"></span><br><span class=\"line\">test = zeros(10,1000);</span><br><span class=\"line\">for k=1:1000</span><br><span class=\"line\">    x = x_test(:,k);</span><br><span class=\"line\"></span><br><span class=\"line\">    hid = layerout(w_h,b_h,x);</span><br><span class=\"line\">    test(:,k)=layerout(w,b,hid);</span><br><span class=\"line\">    </span><br><span class=\"line\">    %正确率表示方式一：输出正确个数</span><br><span class=\"line\">    [t,t_index]=max(test);</span><br><span class=\"line\">    [y,y_index]=max(y_test);</span><br><span class=\"line\">    sum = 0;</span><br><span class=\"line\">    for p=1:length(t_index)</span><br><span class=\"line\">        if t_index(p)==y_index(p)</span><br><span class=\"line\">            sum =sum+1;</span><br><span class=\"line\">        end</span><br><span class=\"line\">    end</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">fprintf(&apos;正确率: %d/1000\\n&apos;,sum);</span><br><span class=\"line\">    </span><br><span class=\"line\">%正确率表示方式二：用plotconfusion函数</span><br><span class=\"line\">plotconfusion(y_test,test);</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n<h5 id=\"main-m\"><a href=\"#main-m\" class=\"headerlink\" title=\"main.m\"></a>main.m</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[x_train,y_train,x_test,y_test]=getdata();</span><br><span class=\"line\"></span><br><span class=\"line\">%归一化</span><br><span class=\"line\">x_train = mapminmax(x_train,0,1);</span><br><span class=\"line\">x_test =mapminmax(x_test,0,1);</span><br><span class=\"line\"></span><br><span class=\"line\">[w1,b1,w_h1,b_h1]=mytrain(x_train,y_train);</span><br><span class=\"line\">fprintf(&apos;mytrain正确率:\\n&apos;);</span><br><span class=\"line\">mytest(x_test,y_test,w1,b1,w_h1,b_h1);</span><br><span class=\"line\"></span><br><span class=\"line\">[w2,b2,w_h2,b_h2]=mytrain(x_train,y_train);</span><br><span class=\"line\">fprintf(&apos;mytrain_mini正确率:\\n&apos;);</span><br><span class=\"line\">mytest(x_test,y_test,w2,b2,w_h2,b_h2);</span><br></pre></td></tr></table></figure>\n<h3 id=\"实验结果\"><a href=\"#实验结果\" class=\"headerlink\" title=\"实验结果\"></a>实验结果</h3><p>直接运行main.m，且两个训练方式都输入相同参数，得到结果如下：<br><img src=\"https://img-blog.csdn.net/20180527224341951?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l1bnl1bnl4/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"结果\"></p>\n<p>下面是mini_batch的plotconfusion结果，mytrain的也差不多。其中绿色的为正确率：<br><img src=\"https://img-blog.csdn.net/20180527224533286?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l1bnl1bnl4/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"mytrain_mini\"></p>\n<p>直观感觉min_batch方式的训练会快一丢丢。由于这里数据不多，所以两者的差别看不大出来！</p>\n","categories":[],"tags":[]},{"title":"win10下安装TensorFlow（CPU only)","url":"http://yoursite.com/2018/09/13/win10下安装TensorFlow（CPU only)/","content":"<h2 id=\"TensorFlow安装过程\"><a href=\"#TensorFlow安装过程\" class=\"headerlink\" title=\"TensorFlow安装过程\"></a>TensorFlow安装过程</h2><h3 id=\"1-环境\"><a href=\"#1-环境\" class=\"headerlink\" title=\"1 环境\"></a>1 环境</h3><p>我的安装环境：win10 + 64位 +miniconda2+miniconda创建的python3.5.5环境+pip</p>\n<p>由于目前TensorFlow在windows下不支持python2.7的环境，而我机器原来的python版本就是miniconda2的2.7版本，所以一直无法安装TensorFlow，每次用pip安装，它都提示无法找到相应的版本。</p>\n<p>所以，为了安装TesnsorFlow，我又利用miniconda创建了一个python3.5的环境。具体步骤如下。</p>\n<p>1、打开安装miniconda时出现的程序“Anaconda Prompt”；<br>输入以下命令，先查看你已经安装了的环境；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda env list</span><br></pre></td></tr></table></figure>\n<p>2、如果发现没有安装python3.5的话，就使用下面语句创建：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda create --name your_env_name python=3.5</span><br></pre></td></tr></table></figure>\n<p>  其中your_env_name可以是你喜欢的任何名字，我的话就用了python3，因为是   python3.5嘛！</p>\n<h3 id=\"2-安装TensorFlow\"><a href=\"#2-安装TensorFlow\" class=\"headerlink\" title=\"2 安装TensorFlow\"></a>2 安装TensorFlow</h3><p>按住win+R，打开cmd，进入命令窗口，先激活python3.5，输入下面命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">activate your_env_name</span><br></pre></td></tr></table></figure>\n<p>如果你的命令行开头出现’(your_env_name)’，那么就是进入python3.5环境啦</p>\n<p>然后直接用pip安装就可以啦:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install tensorflow</span><br></pre></td></tr></table></figure>\n<p>这里的安装需要一段时间，因为下载速度比较慢！！！</p>\n<h3 id=\"3-测试\"><a href=\"#3-测试\" class=\"headerlink\" title=\"3 测试\"></a>3 测试</h3><p>等到成功安装后，在命令行输入python，进入python：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python</span><br></pre></td></tr></table></figure>\n<p>然后依次输入下面语句：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import tensorflow</span><br><span class=\"line\">a = tensorflow.constant(10)</span><br><span class=\"line\">b = tensorflow.constant(22)</span><br><span class=\"line\">sess = tensorflow.Session()</span><br><span class=\"line\">sess.run(a+b)</span><br></pre></td></tr></table></figure>\n<p>如果输出32，那就成功啦！</p>\n","categories":[],"tags":[]},{"title":"python手写神经网络实现识别手写数字","url":"http://yoursite.com/2018/09/13/python手写神经网络实现识别手写数字/","content":"<hr>\n<p>写在开头：这个实验和<a href=\"https://blog.csdn.net/yunyunyx/article/details/80473532\" target=\"_blank\" rel=\"noopener\">matlab手写神经网络实现识别手写数字</a>一样。</p>\n<hr>\n<h3 id=\"实验说明\"><a href=\"#实验说明\" class=\"headerlink\" title=\"实验说明\"></a>实验说明</h3><p>一直想自己写一个神经网络来实现手写数字的识别，而不是套用别人的框架。恰巧前几天，有幸从同学那拿到5000张已经贴好标签的手写数字图片，于是我就尝试用matlab写一个网络。</p>\n<ul>\n<li><p>实验数据：5000张手写数字图片（.jpg)，图片命名为1.jpg,2.jpg…5000.jpg。还有一个放着标签的excel文件。</p>\n</li>\n<li><p>数据处理：前4000张作为训练样本，后1000张作为测试样本。</p>\n</li>\n<li><p>图片处理：用matlab的imread（）函数读取图片的灰度值矩阵（28，28），然后把每张图片的灰度值矩阵reshape为（28*28，1），然后把前4000张图片的灰度值矩阵合并为x_train，把后1000张图片的灰度值矩阵合并为x_test。</p>\n</li>\n</ul>\n<p><img src=\"https://img-blog.csdn.net/20180527224744974?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l1bnl1bnl4/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"数字图片截图\"><br><img src=\"https://img-blog.csdn.net/20180527224824667?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l1bnl1bnl4/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"数字标签截图\"></p>\n<h3 id=\"神经网络设计\"><a href=\"#神经网络设计\" class=\"headerlink\" title=\"神经网络设计\"></a>神经网络设计</h3><ul>\n<li><p>网络层设计：一层隐藏层，一层输出层</p>\n</li>\n<li><p>输入层：一张图片的灰度值矩阵reshape后的784个数，也就是x_train中的某一列</p>\n</li>\n<li><p>输出层：（10，1）的列向量，其中列向量中最大的数所在的索引+1就是预测的数字</p>\n</li>\n<li><p>激励函数：sigmoid函数（<a href=\"https://baike.baidu.com/item/Sigmoid%E5%87%BD%E6%95%B0\" target=\"_blank\" rel=\"noopener\">公式</a>)</p>\n</li>\n<li><p>更新法则：后向传播算法（<a href=\"http://www.cnblogs.com/ronny/p/ann_02.html\" target=\"_blank\" rel=\"noopener\">参考</a>）</p>\n</li>\n<li><p>测试：统计预测正确的个数</p>\n</li>\n</ul>\n<h3 id=\"网络实现\"><a href=\"#网络实现\" class=\"headerlink\" title=\"网络实现\"></a>网络实现</h3><ul>\n<li>函数说明：读图片的函数（read_photo() ）、读excel的函数（read_excel(path) ）、修正函数（layerout(w,b,x) ）、训练函数（mytrain(x_train,y_train) ）、测试函数（mytest(x_test,y_test,w,b,w_h,b_h) ）、主函数（main() ）</li>\n</ul>\n<p>具体代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding: utf-8 -*-</span><br><span class=\"line\"></span><br><span class=\"line\">from PIL import Image</span><br><span class=\"line\"></span><br><span class=\"line\">from pylab import *</span><br><span class=\"line\"></span><br><span class=\"line\">import numpy as np</span><br><span class=\"line\"></span><br><span class=\"line\">import xlrd</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#读取图片的灰度值矩阵</span><br><span class=\"line\">def read_photo():</span><br><span class=\"line\">\tfor i in range(5000):</span><br><span class=\"line\">\t\tj = i+1</span><br><span class=\"line\">\t\tj = str(j)</span><br><span class=\"line\">\t\tst = &apos;.jpg&apos;</span><br><span class=\"line\">\t\tj = j+st</span><br><span class=\"line\">\t\tim1 = array(Image.open(j))</span><br><span class=\"line\">\t\t#（28，28）--&gt;(28*28,1)</span><br><span class=\"line\">\t\tim1 = im1.reshape((784,1))</span><br><span class=\"line\">\t\t#把所有的图片灰度值放到一个矩阵中</span><br><span class=\"line\">\t\t#一列代表一张图片的信息</span><br><span class=\"line\">\t\tif i == 0:</span><br><span class=\"line\">\t\t\tim = im1</span><br><span class=\"line\">\t\telse:</span><br><span class=\"line\">\t\t\tim = np.hstack((im,im1))</span><br><span class=\"line\">\treturn im</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#读取excel文件内容（path为文件路径）</span><br><span class=\"line\">def read_excel(path):</span><br><span class=\"line\">    # 获取所有sheet</span><br><span class=\"line\">    workbook = xlrd.open_workbook(path)</span><br><span class=\"line\">    sheet_names = workbook.sheet_names()</span><br><span class=\"line\"></span><br><span class=\"line\">    # 根据sheet索引或者名称获取sheet内容</span><br><span class=\"line\">    for sheet_name in sheet_names:</span><br><span class=\"line\">        isheet = workbook.sheet_by_name(sheet_name)</span><br><span class=\"line\">        </span><br><span class=\"line\">        #获取该sheet的列数</span><br><span class=\"line\">        ncols = isheet.ncols</span><br><span class=\"line\">        #获取每一列的内容</span><br><span class=\"line\">        for i in range(ncols):</span><br><span class=\"line\">            if i == 0:</span><br><span class=\"line\">                xl1 = isheet.col_values(i)</span><br><span class=\"line\">                xl1 = np.array(xl1)</span><br><span class=\"line\">                xl1 = xl1.reshape((10,1))</span><br><span class=\"line\">                xl = xl1</span><br><span class=\"line\">            else:</span><br><span class=\"line\">                xl1 = isheet.col_values(i)</span><br><span class=\"line\">                xl1 = np.array(xl1)</span><br><span class=\"line\">                xl1 = xl1.reshape((10,1))</span><br><span class=\"line\">                xl = np.hstack((xl,xl1))</span><br><span class=\"line\">    return xl</span><br><span class=\"line\">    </span><br><span class=\"line\">#layerout函数</span><br><span class=\"line\">def layerout(w,b,x):</span><br><span class=\"line\">    y = np.dot(w,x) + b</span><br><span class=\"line\">    t = -1.0*y</span><br><span class=\"line\">    # n = len(y)</span><br><span class=\"line\">    # for i in range(n):</span><br><span class=\"line\">        # y[i]=1.0/(1+exp(-y[i]))</span><br><span class=\"line\">    y = 1.0/(1+exp(t))</span><br><span class=\"line\">    return y</span><br><span class=\"line\">    </span><br><span class=\"line\"> </span><br><span class=\"line\">#训练函数</span><br><span class=\"line\">def mytrain(x_train,y_train):</span><br><span class=\"line\">    &apos;&apos;&apos;</span><br><span class=\"line\">    设置一个隐藏层，784--&gt;隐藏层神经元个数--&gt;10</span><br><span class=\"line\">    &apos;&apos;&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">    step=int(input(&apos;mytrain迭代步数：&apos;)) </span><br><span class=\"line\">    a=double(input(&apos;学习因子：&apos;)) </span><br><span class=\"line\">    inn = 784  #输入神经元个数</span><br><span class=\"line\">    hid = int(input(&apos;隐藏层神经元个数：&apos;))#隐藏层神经元个数</span><br><span class=\"line\">    out = 10  #输出层神经元个数</span><br><span class=\"line\"></span><br><span class=\"line\">    w = np.random.randn(out,hid)</span><br><span class=\"line\">    w = np.mat(w)</span><br><span class=\"line\">    b = np.mat(np.random.randn(out,1)) </span><br><span class=\"line\">    w_h = np.random.randn(hid,inn)</span><br><span class=\"line\">    w_h = np.mat(w_h)</span><br><span class=\"line\">    b_h = np.mat(np.random.randn(hid,1)) </span><br><span class=\"line\">    </span><br><span class=\"line\">    for i in range(step):</span><br><span class=\"line\">        #打乱训练样本</span><br><span class=\"line\">        r=np.random.permutation(4000)</span><br><span class=\"line\">        x_train = x_train[:,r]</span><br><span class=\"line\">        y_train = y_train[:,r]</span><br><span class=\"line\">        #mini_batch</span><br><span class=\"line\">        for j in range(400):</span><br><span class=\"line\">            #取batch为10  更新取10次的平均值</span><br><span class=\"line\">            x = np.mat(x_train[:,j]) </span><br><span class=\"line\">            x = x.reshape((784,1))</span><br><span class=\"line\">            y = np.mat(y_train[:,j]) </span><br><span class=\"line\">            y = y.reshape((10,1))</span><br><span class=\"line\">            hid_put = layerout(w_h,b_h,x) </span><br><span class=\"line\">            out_put = layerout(w,b,hid_put) </span><br><span class=\"line\">            </span><br><span class=\"line\">            #更新公式的实现</span><br><span class=\"line\">            o_update = np.multiply(np.multiply((y-out_put),out_put),(1-out_put)) </span><br><span class=\"line\">            h_update = np.multiply(np.multiply(np.dot((w.T),np.mat(o_update)),hid_put),(1-hid_put)) </span><br><span class=\"line\">           </span><br><span class=\"line\">            outw_update = a*np.dot(o_update,(hid_put.T)) </span><br><span class=\"line\">            outb_update = a*o_update </span><br><span class=\"line\">            hidw_update = a*np.dot(h_update,(x.T)) </span><br><span class=\"line\">            hidb_update = a*h_update </span><br><span class=\"line\">            </span><br><span class=\"line\">            w = w + outw_update </span><br><span class=\"line\">            b = b+ outb_update </span><br><span class=\"line\">            w_h = w_h +hidw_update </span><br><span class=\"line\">            b_h =b_h +hidb_update </span><br><span class=\"line\">            </span><br><span class=\"line\">    return w,b,w_h,b_h</span><br><span class=\"line\">    </span><br><span class=\"line\">#test函数</span><br><span class=\"line\">def mytest(x_test,y_test,w,b,w_h,b_h):</span><br><span class=\"line\">    &apos;&apos;&apos;</span><br><span class=\"line\">    统计1000个测试样本中有多少个预测正确了</span><br><span class=\"line\">    预测结果表示：10*1的列向量中最大的那个数的索引+1就是预测结果了</span><br><span class=\"line\">    &apos;&apos;&apos;</span><br><span class=\"line\">    sum = 0</span><br><span class=\"line\">    for k in range(1000):</span><br><span class=\"line\">        x = np.mat(x_test[:,k])</span><br><span class=\"line\">        x = x.reshape((784,1))</span><br><span class=\"line\">        </span><br><span class=\"line\">        y = np.mat(y_test[:,k])</span><br><span class=\"line\">        y = y.reshape((10,1))</span><br><span class=\"line\">        </span><br><span class=\"line\">        yn = np.where(y ==(np.max(y)))</span><br><span class=\"line\">        # print(yn)</span><br><span class=\"line\">        # print(y)</span><br><span class=\"line\">        hid = layerout(w_h,b_h,x);</span><br><span class=\"line\">        pre = layerout(w,b,hid);</span><br><span class=\"line\">        #print(pre)</span><br><span class=\"line\">        pre = np.mat(pre)</span><br><span class=\"line\">        pre = pre.reshape((10,1))</span><br><span class=\"line\">        pren = np.where(pre ==(np.max(pre)))</span><br><span class=\"line\">        # print(pren)</span><br><span class=\"line\">        # print(pre)</span><br><span class=\"line\">        if yn == pren:</span><br><span class=\"line\">            sum += 1</span><br><span class=\"line\">        </span><br><span class=\"line\">    print(&apos;1000个样本，正确的有:&apos;,sum)</span><br><span class=\"line\"></span><br><span class=\"line\">def main():</span><br><span class=\"line\">    #获取图片信息</span><br><span class=\"line\">    im = read_photo()</span><br><span class=\"line\">    immin = im.min()</span><br><span class=\"line\">    immax = im.max()</span><br><span class=\"line\">    </span><br><span class=\"line\">    im = (im-immin)/(immax-immin)</span><br><span class=\"line\">    </span><br><span class=\"line\">    #前4000张图片作为训练样本</span><br><span class=\"line\">    x_train = im[:,0:4000]</span><br><span class=\"line\">    #后1000张图片作为测试样本</span><br><span class=\"line\">    x_test = im[:,4000:5000]</span><br><span class=\"line\">    </span><br><span class=\"line\">    #获取label信息</span><br><span class=\"line\">    xl = read_excel(&apos;./label.xlsx&apos;)</span><br><span class=\"line\"> </span><br><span class=\"line\">    y_train = xl[:,0:4000]</span><br><span class=\"line\">    y_test = xl[:,4000:5000]</span><br><span class=\"line\"></span><br><span class=\"line\">    print(&quot;---------------------------------------------------------------&quot;)</span><br><span class=\"line\">    w,b,w_h,b_h = mytrain(x_train,y_train)</span><br><span class=\"line\">    mytest(x_test,y_test,w,b,w_h,b_h)</span><br><span class=\"line\">    print(&quot;---------------------------------------------------------------&quot;)</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">if __name__ == &apos;__main__&apos;:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n<h3 id=\"实验结果\"><a href=\"#实验结果\" class=\"headerlink\" title=\"实验结果\"></a>实验结果</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---------------------------------------------------------------</span><br><span class=\"line\">mytrain迭代步数：300</span><br><span class=\"line\">学习因子：0.3</span><br><span class=\"line\">隐藏层神经元个数：28</span><br><span class=\"line\">1000个样本，正确的有: 933</span><br><span class=\"line\">---------------------------------------------------------------</span><br></pre></td></tr></table></figure>\n<p>迭代300步，正确率就有93.3%啦，还不错的正确率~</p>\n","categories":[],"tags":[]},{"title":"python爬取当当网的书籍信息并保存到csv文件","url":"http://yoursite.com/2018/09/13/python爬取当当网的书籍信息并保存到csv文件/","content":"<p>﻿</p>\n<h3 id=\"python爬取当当网的书籍信息并保存到csv文件\"><a href=\"#python爬取当当网的书籍信息并保存到csv文件\" class=\"headerlink\" title=\"python爬取当当网的书籍信息并保存到csv文件\"></a>python爬取当当网的书籍信息并保存到csv文件</h3><ul>\n<li>依赖的库：</li>\n<li>requests #用来获取页面内容</li>\n<li>BeautifulSoup #opython3不能安装BeautifulSoup，但可以安装BeautifulSoup4（pip install bs4）</li>\n</ul>\n<p>此实验爬取了当当网中关于深度学习的书籍，内容包括书籍名称、作者、出版社、当前价钱。为方便，此实验只爬取搜索出来的一个页面的书籍。具体步骤如下：</p>\n<ul>\n<li>1 打开当当网，搜索“深度学习”，等待页面加载，获取当前网址<br>“<a href=\"http://search.dangdang.com/?key=%C9%EE%B6%C8%D1%A7%CF%B0&amp;act=input&quot;\" target=\"_blank\" rel=\"noopener\">http://search.dangdang.com/?key=%C9%EE%B6%C8%D1%A7%CF%B0&amp;act=input&quot;</a></li>\n<li>2 点击鼠标右键，选择’检查’，获取当前页面的网页信息</li>\n<li>3 分析网页代码，截取我们要的内容。</li>\n<li>4 实验设计为：先从搜索’深度学习‘后得到的页面中抓取相关书籍的链接（url）；然后再遍历每个url，从该书籍的具体页面中寻找信息。（如果单单是爬取我上面的那些内容的话，好像不用进去每个书籍的链接 直接在搜索出来的页面获取 也可以。。。）</li>\n</ul>\n<p>下面是具体代码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">from</span> bs4 <span class=\"keyword\">import</span> BeautifulSoup</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_all_books</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        获取该页面所有符合要求的书本的链接</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://search.dangdang.com/?key=%C9%EE%B6%C8%D1%A7%CF%B0&amp;act=input'</span></span><br><span class=\"line\">    book_list = []</span><br><span class=\"line\">    r = requests.get(url, timeout=<span class=\"number\">30</span>)</span><br><span class=\"line\">    soup = BeautifulSoup(r.text, <span class=\"string\">'lxml'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    book_ul = soup.find_all(<span class=\"string\">'ul'</span>, &#123;<span class=\"string\">'class'</span>: <span class=\"string\">'bigimg'</span>,<span class=\"string\">'id'</span>:<span class=\"string\">'component_0__0__6612'</span>&#125;)</span><br><span class=\"line\">    book_ps = book_ul[<span class=\"number\">0</span>].find_all(<span class=\"string\">'p'</span>,&#123;<span class=\"string\">'class'</span>:<span class=\"string\">'name'</span>,<span class=\"string\">'name'</span>:<span class=\"string\">'title'</span>&#125;)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> book_p <span class=\"keyword\">in</span> book_ps:</span><br><span class=\"line\">        book_a = book_p.find(<span class=\"string\">'a'</span>)</span><br><span class=\"line\">        book_url = book_a.get(<span class=\"string\">'href'</span>)</span><br><span class=\"line\">        book_list.append(book_url)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> book_list</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#获取每本书的url，并打印出来</span></span><br><span class=\"line\">books = get_all_books()</span><br><span class=\"line\"><span class=\"keyword\">for</span> book <span class=\"keyword\">in</span> books:</span><br><span class=\"line\">    print(book)</span><br></pre></td></tr></table></figure>\n<pre><code>http://product.dangdang.com/25111382.html\nhttp://product.dangdang.com/25089622.html\nhttp://product.dangdang.com/25231551.html\nhttp://product.dangdang.com/25234782.html\nhttp://product.dangdang.com/25224111.html\nhttp://product.dangdang.com/23993317.html\nhttp://product.dangdang.com/25073661.html\nhttp://product.dangdang.com/25245282.html\nhttp://product.dangdang.com/25208778.html\nhttp://product.dangdang.com/25212175.html\nhttp://product.dangdang.com/25175809.html\nhttp://product.dangdang.com/23983230.html\nhttp://product.dangdang.com/24104547.html\nhttp://product.dangdang.com/25124666.html\nhttp://product.dangdang.com/23996903.html\nhttp://product.dangdang.com/25082459.html\nhttp://product.dangdang.com/25207334.html\nhttp://product.dangdang.com/25104088.html\nhttp://product.dangdang.com/25163815.html\nhttp://product.dangdang.com/25118239.html\nhttp://product.dangdang.com/25105666.html\nhttp://product.dangdang.com/25208772.html\nhttp://product.dangdang.com/24049457.html\nhttp://product.dangdang.com/25234806.html\nhttp://product.dangdang.com/25230551.html\nhttp://product.dangdang.com/25166563.html\nhttp://product.dangdang.com/24165179.html\nhttp://product.dangdang.com/25250547.html\nhttp://product.dangdang.com/25262534.html\nhttp://product.dangdang.com/25098329.html\nhttp://product.dangdang.com/25225304.html\nhttp://product.dangdang.com/23925889.html\nhttp://product.dangdang.com/25261023.html\nhttp://product.dangdang.com/25269988.html\nhttp://product.dangdang.com/25138676.html\nhttp://product.dangdang.com/25125879.html\nhttp://product.dangdang.com/25250993.html\nhttp://product.dangdang.com/25243399.html\nhttp://product.dangdang.com/1057511057.html\nhttp://product.dangdang.com/25066760.html\nhttp://product.dangdang.com/24195829.html\nhttp://product.dangdang.com/25119333.html\nhttp://product.dangdang.com/24048571.html\nhttp://product.dangdang.com/25269074.html\nhttp://product.dangdang.com/25182369.html\nhttp://product.dangdang.com/25189701.html\nhttp://product.dangdang.com/25251315.html\nhttp://product.dangdang.com/25255372.html\nhttp://product.dangdang.com/1230199397.html\nhttp://product.dangdang.com/25073507.html\nhttp://product.dangdang.com/1336821476.html\nhttp://product.dangdang.com/25190949.html\nhttp://product.dangdang.com/1365765197.html\nhttp://product.dangdang.com/25215200.html\nhttp://product.dangdang.com/25242647.html\nhttp://product.dangdang.com/1211962291.html\nhttp://product.dangdang.com/25261676.html\n</code></pre><p>上面就是获取到的每本书的url，下面来处理每本书的url，获取每本书的信息：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_book_information</span><span class=\"params\">(book_url)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        获取书籍的信息</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    r = requests.get(book_url, timeout=<span class=\"number\">60</span>)</span><br><span class=\"line\">    soup = BeautifulSoup(r.text, <span class=\"string\">'lxml'</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    book_info = []</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">#获取书籍名称</span></span><br><span class=\"line\">    div_name = soup.find(<span class=\"string\">'div'</span>, &#123;<span class=\"string\">'class'</span>: <span class=\"string\">'name_info'</span>,<span class=\"string\">'ddt-area'</span>:<span class=\"string\">'001'</span>&#125;)</span><br><span class=\"line\">    h1 = div_name.find(<span class=\"string\">'h1'</span>,&#123;&#125;)</span><br><span class=\"line\">    book_name = h1.get(<span class=\"string\">'title'</span>)</span><br><span class=\"line\">    book_info.append(book_name)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">#获取书籍作者</span></span><br><span class=\"line\">    div_author = soup.find(<span class=\"string\">'div'</span>,&#123;<span class=\"string\">'class'</span>:<span class=\"string\">'messbox_info'</span>&#125;)</span><br><span class=\"line\">    span_author = div_author.find(<span class=\"string\">'span'</span>,&#123;<span class=\"string\">'class'</span>:<span class=\"string\">'t1'</span>,<span class=\"string\">'dd_name'</span>:<span class=\"string\">'作者'</span>&#125;)</span><br><span class=\"line\">    book_author = span_author.text.strip()[<span class=\"number\">3</span>:]</span><br><span class=\"line\">    book_info.append(book_author)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">#获取书籍出版社</span></span><br><span class=\"line\">    div_press = soup.find(<span class=\"string\">'div'</span>,&#123;<span class=\"string\">'class'</span>:<span class=\"string\">'messbox_info'</span>&#125;)</span><br><span class=\"line\">    span_press = div_press.find(<span class=\"string\">'span'</span>,&#123;<span class=\"string\">'class'</span>:<span class=\"string\">'t1'</span>,<span class=\"string\">'dd_name'</span>:<span class=\"string\">'出版社'</span>&#125;)</span><br><span class=\"line\">    book_press = span_press.text.strip()[<span class=\"number\">4</span>:]</span><br><span class=\"line\">    book_info.append(book_press)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">#获取书籍价钱</span></span><br><span class=\"line\">    div_price = soup.find(<span class=\"string\">'div'</span>,&#123;<span class=\"string\">'class'</span>:<span class=\"string\">'price_d'</span>&#125;)</span><br><span class=\"line\">    book_price = div_price.find(<span class=\"string\">'p'</span>,&#123;<span class=\"string\">'id'</span>:<span class=\"string\">'dd-price'</span>&#125;).text.strip()</span><br><span class=\"line\">    book_info.append(book_price)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> book_info</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> csv</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#获取每本书的信息，并把信息保存到csv文件中</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    header = [<span class=\"string\">'书籍名称'</span>,<span class=\"string\">'作者'</span>,<span class=\"string\">'出本社'</span>,<span class=\"string\">'当前价钱'</span>]</span><br><span class=\"line\">    <span class=\"keyword\">with</span> open(<span class=\"string\">'DeepLearning_book_info.csv'</span>,<span class=\"string\">'w'</span>,encoding=<span class=\"string\">'utf-8'</span>,newline=<span class=\"string\">''</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        writer = csv.writer(f)</span><br><span class=\"line\">        writer.writerow(header)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i,book <span class=\"keyword\">in</span> enumerate(books):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> i%<span class=\"number\">10</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">                print(<span class=\"string\">'获取了&#123;&#125;条信息，一共&#123;&#125;条信息'</span>.format(i,len(books)))</span><br><span class=\"line\">            l = get_book_information(book)</span><br><span class=\"line\">            writer.writerow(l)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n<pre><code>获取了0条信息，一共57条信息\n获取了10条信息，一共57条信息\n获取了20条信息，一共57条信息\n获取了30条信息，一共57条信息\n获取了40条信息，一共57条信息\n获取了50条信息，一共57条信息\n</code></pre><p>至此，爬虫结束，查看当前目录，就可以找到我们刚刚保存的DeepLearn_book_info.csv文件啦，打开查看，便得到下面的内容：<br><img src=\"https://img-blog.csdn.net/20180508104902486?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l1bnl1bnl4/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"这里写图片描述\"></p>\n<p>这样就把我们想要的书籍信息保存到csv文件啦。</p>\n","categories":[],"tags":[]},{"title":"python将图片转化为字符图","url":"http://yoursite.com/2018/09/13/python将图片转化为字符图/","content":"<p>﻿最近看到将图片转化为字符图的小实验，我觉得很有趣，所以决定自己实现一下。</p>\n<p>步骤和原理如下：</p>\n<ul>\n<li><p>读取图片的灰度值矩阵（0-255之间），灰度值矩阵主要反映的是图片的黑白程度，越黑越接近与0，越白越接近于255</p>\n</li>\n<li><p>确定用于作画的字符</p>\n</li>\n<li><p>根据灰度值确定代替字符，灰度值越小，其代替字符应该笔画越多（这样才能看起来颜色更深）</p>\n</li>\n<li><p>把全部选好的代替字符写入文本</p>\n</li>\n<li><p>选择字符的做法：用256（0-255又256个数）除以可以用于作画的字符的总长度，然后得到一个字符的灰度值区间。然后灰度值在某个区间是就转化为指定的字符。</p>\n</li>\n<li><p>我从google图片下载了一张小猪佩奇的图片，侵删，然后用它来画字符画，结果如下：<br><img src=\"https://img-blog.csdn.net/20180627110233954?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l1bnl1bnl4/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"小猪佩奇\"><img src=\"https://img-blog.csdn.net/20180627110400463?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l1bnl1bnl4/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"小猪佩奇字符画\"></p>\n</li>\n</ul>\n<p>还是蛮像的!<br>代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># coding: utf-8</span><br><span class=\"line\"></span><br><span class=\"line\">import numpy as np</span><br><span class=\"line\">from PIL import Image</span><br><span class=\"line\"></span><br><span class=\"line\">def img_to_char(image_path,height):</span><br><span class=\"line\">    &apos;&apos;&apos;</span><br><span class=\"line\">    将图片转化为字符</span><br><span class=\"line\">    image_path是图片的路径</span><br><span class=\"line\">    height是字符串图片的高度</span><br><span class=\"line\">    &apos;&apos;&apos;</span><br><span class=\"line\">    </span><br><span class=\"line\">    #读取图片</span><br><span class=\"line\">    img = Image.open(image_file)</span><br><span class=\"line\">    img_width, img_height = img.size</span><br><span class=\"line\">    # 假设字符的宽度是高度的3倍</span><br><span class=\"line\">    width = 3* height * img_width // img_height</span><br><span class=\"line\">    img = img.resize((width, height), Image.ANTIALIAS)</span><br><span class=\"line\">    #读取图片的灰度值矩阵</span><br><span class=\"line\">    data = np.array(img.convert(&apos;L&apos;))</span><br><span class=\"line\">    #设定字符,字符数要是256的因子，这里取32</span><br><span class=\"line\">    chars = &quot;#RMNHQODBWGPZ*@$C&amp;98?32I1&gt;!:-;. &quot;</span><br><span class=\"line\">    N = len(chars)</span><br><span class=\"line\">    #计算每个字符的区间,//取整</span><br><span class=\"line\">    n = 256 // N</span><br><span class=\"line\">    #result是字符结果</span><br><span class=\"line\">    result = &apos;&apos;</span><br><span class=\"line\">    for i in range(height):</span><br><span class=\"line\">        for j in range(width):</span><br><span class=\"line\">            result += chars[data[i][j] // n]</span><br><span class=\"line\">        result += &apos;\\n&apos;</span><br><span class=\"line\">    with open(&apos;img.txt&apos;, mode=&apos;w&apos;) as f:</span><br><span class=\"line\">        f.write(result)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &apos;__main__&apos;:</span><br><span class=\"line\">    image_file = &apos;10.jpg&apos;</span><br><span class=\"line\">    height = 100</span><br><span class=\"line\">    img_to_char(image_file,height)</span><br></pre></td></tr></table></figure>\n","categories":[],"tags":[]},{"title":"Hello World","url":"http://yoursite.com/2018/08/25/hello-world/","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","categories":[],"tags":[]},{"title":"about","url":"http://yoursite.com/about/index.html","content":"","categories":[],"tags":[]},{"title":"","url":"http://yoursite.com/css/personal-style.css","content":"html.page-home {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-image: url('/images/bp.jpg');\n  background-color: transparent;\n  background-size: cover;\n  background-position: center center;\n  background-repeat: no-repeat;\n\n  /*background: linear-gradient( #1abc9c, transparent), linear-gradient( 90deg, skyblue, transparent), linear-gradient( -90deg, coral, transparent);*/\n  /*background-blend-mode: screen;*/\n\n  /*background: linear-gradient(to left, #5f2c82, #49a09d);*/\n}\n","categories":[],"tags":[]},{"title":"category","url":"http://yoursite.com/category/index.html","content":"","categories":[],"tags":[]},{"title":"search","url":"http://yoursite.com/search/index.html","content":"","categories":[],"tags":[]},{"title":"tag","url":"http://yoursite.com/tag/index.html","content":"","categories":[],"tags":[]}]